{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "extends": [
        "plugin:you-dont-need-lodash-underscore/compatible",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "plugins": ["@typescript-eslint"],
    "rules": {
        "@typescript-eslint/explicit-function-return-type": [
            "error",
            {
                "allowExpressions": true
            }
        ],
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/camelcase": "off",
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/semi": "warn",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-namespace": "warn",
        "no-var": "error",
        "no-console": "warn",
        "camelcase": "off",
        "curly": "warn",
        "eqeqeq": "warn",
        "no-throw-literal": "warn",
        "semi": 2,
        "no-empty": "warn",
        "no-unused-expressions": ["error", { "allowTernary": true }],
        "no-use-before-define": "off",
        "@typescript-eslint/naming-convention": [
            "error",
            { "selector": "variableLike", "format": ["camelCase"] },
            {
                "selector": "variable",
                "format": ["camelCase", "UPPER_CASE"]
            },
            {
                "selector": "variable",
                "types": ["boolean"],
                "format": ["PascalCase"],
                "prefix": ["is", "should", "has", "can", "did", "will"]
            },
            {
                "selector": "typeParameter",
                "format": ["PascalCase"],
                "prefix": ["T"]
            }
        ]
    },
    "ignorePatterns": ["./package.json", "./package-lock.json"]
}
