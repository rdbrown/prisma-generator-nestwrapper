/********************************************************************************************************************
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 *
 *                          AUTOGENERATED CODE : DO NOT EDIT
 *
 *
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 ******************************************************************************************************************/

import { Injectable } from "@nestjs/common";
import { Prisma, User } from "@prisma/client";
import { PrismaService } from "nestjs-prisma";

@Injectable()
export class UserServiceBase {
    constructor(private prisma: PrismaService) {}

    async count<T extends Prisma.UserFindManyArgs>(
        args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
    ): Promise<number> {
        return this.prisma.user.count(args);
    }

    async create<T extends Prisma.UserCreateArgs>(
        args: Prisma.SelectSubset<T, Prisma.UserCreateArgs>
    ): Promise<User> {
        return await this.prisma.user.create<T>(args);
    }

    async findMany<T extends Prisma.UserFindManyArgs>(
        args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
    ): Promise<User[]> {
        return await this.prisma.user.findMany(args);
    }

    async findOne<T extends Prisma.UserFindUniqueArgs>(
        args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
    ): Promise<User | null> {
        return await this.prisma.user.findUnique(args);
    }

    async update<T extends Prisma.UserUpdateArgs>(
        args: Prisma.SelectSubset<T, Prisma.UserUpdateArgs>
    ): Promise<User> {
        return await this.prisma.user.update<T>(args);
    }

    async remove<T extends Prisma.UserDeleteArgs>(
        args: Prisma.SelectSubset<T, Prisma.UserDeleteArgs>
    ): Promise<User> {
        return await this.prisma.user.delete(args);
    }
}
