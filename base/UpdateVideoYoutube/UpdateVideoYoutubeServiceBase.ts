/********************************************************************************************************************
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 *
 *                          AUTOGENERATED CODE : DO NOT EDIT
 *
 *
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 ******************************************************************************************************************/

import { Injectable } from "@nestjs/common";
import { Prisma, UpdateVideoYoutube } from "@prisma/client";
import { PrismaService } from "nestjs-prisma";

@Injectable()
export class UpdateVideoYoutubeServiceBase {
    constructor(private prisma: PrismaService) {}

    async count<T extends Prisma.UpdateVideoYoutubeFindManyArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeFindManyArgs>
    ): Promise<number> {
        return this.prisma.updateVideoYoutube.count(args);
    }

    async create<T extends Prisma.UpdateVideoYoutubeCreateArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeCreateArgs>
    ): Promise<UpdateVideoYoutube> {
        return await this.prisma.updateVideoYoutube.create<T>(args);
    }

    async findMany<T extends Prisma.UpdateVideoYoutubeFindManyArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeFindManyArgs>
    ): Promise<UpdateVideoYoutube[]> {
        return await this.prisma.updateVideoYoutube.findMany(args);
    }

    async findOne<T extends Prisma.UpdateVideoYoutubeFindUniqueArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeFindUniqueArgs>
    ): Promise<UpdateVideoYoutube | null> {
        return await this.prisma.updateVideoYoutube.findUnique(args);
    }

    async update<T extends Prisma.UpdateVideoYoutubeUpdateArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeUpdateArgs>
    ): Promise<UpdateVideoYoutube> {
        return await this.prisma.updateVideoYoutube.update<T>(args);
    }

    async remove<T extends Prisma.UpdateVideoYoutubeDeleteArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeDeleteArgs>
    ): Promise<UpdateVideoYoutube> {
        return await this.prisma.updateVideoYoutube.delete(args);
    }
}
