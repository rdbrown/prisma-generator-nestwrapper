/********************************************************************************************************************
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 *
 *                          AUTOGENERATED CODE : DO NOT EDIT
 *
 *
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 ******************************************************************************************************************/

import { Injectable } from "@nestjs/common";
import { Prisma, UpdateVideoYoutube } from "@prisma/client";
import { PrismaService } from "nestjs-prisma";

@Injectable()
export class UpdateVideoYoutubeServiceBase {
    constructor(private prisma: PrismaService) {}

    async count<T extends Prisma.UpdateVideoYoutubeFindManyArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeFindManyArgs>
    ): Promise<number> {
        return this.prisma.updateVideoYoutube.count(args);
    }

    async create<T extends Prisma.UpdateVideoYoutubeCreateArgs>(
        args: Prisma.SelectSubset<T, Prisma.UpdateVideoYoutubeCreateArgs>
    ): Promise<UpdateVideoYoutube> {
        return await this.prisma.updateVideoYoutube.create<T>(args);
    }

    async findAll(
        args: Prisma.UpdateVideoYoutubeFindManyArgs
    ): Promise<
        Prisma.Prisma__UpdateVideoYoutubeClient<UpdateVideoYoutube[] | null>
    > {
        return await this.prisma.updateVideoYoutube.findMany(args);
    }

    async findOne(
        args: Prisma.UpdateVideoYoutubeFindUniqueArgs
    ): Promise<
        Prisma.Prisma__UpdateVideoYoutubeClient<UpdateVideoYoutube | null>
    > {
        return await this.prisma.updateVideoYoutube.findUnique(args);
    }

    async update(
        args: Prisma.UpdateVideoYoutubeUpdateArgs
    ): Promise<
        Prisma.Prisma__UpdateVideoYoutubeClient<UpdateVideoYoutube | null>
    > {
        return await this.prisma.updateVideoYoutube.update(args);
    }

    async remove(
        args: Prisma.UpdateVideoYoutubeDeleteArgs
    ): Promise<
        Prisma.Prisma__UpdateVideoYoutubeClient<UpdateVideoYoutube | null>
    > {
        return await this.prisma.updateVideoYoutube.delete(args);
    }
}
