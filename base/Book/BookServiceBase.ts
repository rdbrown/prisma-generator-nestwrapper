/********************************************************************************************************************
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 *
 *                          AUTOGENERATED CODE : DO NOT EDIT
 *
 *
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 ******************************************************************************************************************/

import { Injectable } from "@nestjs/common";
import { Prisma, Book } from "@prisma/client";
import { PrismaService } from "nestjs-prisma";

@Injectable()
export class BookServiceBase {
    constructor(private prisma: PrismaService) {}

    async create(
        args: Prisma.BookCreateArgs
    ): Promise<Prisma.Prisma__BookClient<Book | null>> {
        return await this.prisma.book.create(args);
    }

    async findAll(
        args: Prisma.BookFindManyArgs
    ): Promise<Prisma.Prisma__BookClient<Book[] | null>> {
        return await this.prisma.book.findMany(args);
    }

    async findOne(
        args: Prisma.BookFindUniqueArgs
    ): Promise<Prisma.Prisma__BookClient<Book | null>> {
        return await this.prisma.book.findUnique(args);
    }

    async update(
        args: Prisma.BookUpdateArgs
    ): Promise<Prisma.Prisma__BookClient<Book | null>> {
        return await this.prisma.book.update(args);
    }

    async remove(
        args: Prisma.BookDeleteArgs
    ): Promise<Prisma.Prisma__BookClient<Book | null>> {
        return await this.prisma.book.delete(args);
    }
}
