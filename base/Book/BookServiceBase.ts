/********************************************************************************************************************
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 *
 *                          AUTOGENERATED CODE : DO NOT EDIT
 *
 *
 * ******************************************************************************************************************
 * ******************************************************************************************************************
 ******************************************************************************************************************/

import { Injectable } from "@nestjs/common";
import { Prisma, Book } from "@prisma/client";
import { PrismaService } from "nestjs-prisma";

@Injectable()
export class BookServiceBase {
    constructor(private prisma: PrismaService) {}

    async count<T extends Prisma.BookFindManyArgs>(
        args: Prisma.SelectSubset<T, Prisma.BookFindManyArgs>
    ): Promise<number> {
        return this.prisma.book.count(args);
    }

    async create<T extends Prisma.BookCreateArgs>(
        args: Prisma.SelectSubset<T, Prisma.BookCreateArgs>
    ): Promise<Book> {
        return await this.prisma.book.create<T>(args);
    }

    async findMany<T extends Prisma.BookFindManyArgs>(
        args: Prisma.SelectSubset<T, Prisma.BookFindManyArgs>
    ): Promise<Book[]> {
        return await this.prisma.book.findMany(args);
    }

    async findOne<T extends Prisma.BookFindUniqueArgs>(
        args: Prisma.SelectSubset<T, Prisma.BookFindUniqueArgs>
    ): Promise<Book | null> {
        return await this.prisma.book.findUnique(args);
    }

    async update<T extends Prisma.BookUpdateArgs>(
        args: Prisma.SelectSubset<T, Prisma.BookUpdateArgs>
    ): Promise<Book> {
        return await this.prisma.book.update<T>(args);
    }

    async remove<T extends Prisma.BookDeleteArgs>(
        args: Prisma.SelectSubset<T, Prisma.BookDeleteArgs>
    ): Promise<Book> {
        return await this.prisma.book.delete(args);
    }
}
